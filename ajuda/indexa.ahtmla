   private static final String templateRaiz =             
             
            "   <html>"
            + "     <head>"
            + "         <link rel=\"stylesheet\" type=\"text/css\" href=\"file:./ajuda/ajuda.css\"/>"
            + "     </head>"
            + "     <body>"
            + "         <h1>Ajuda</h1>"
            + "         <p>"
            + "             Bem vindo à ajuda do Portugol Studio! Selecione um tópico na árvore de navegação ao "
            + "             lado para visualizar seu conteúdo!"
            + "         </p>"
            + "     </body>"
            + "</html>\"";
    
    private boolean ajudaCarregada = false;
    private boolean carregandoAjuda = false;
    private Carregador carregador = null;
    private Action acaoAtualizarAjuda;
    private Action acaoAtualizarTopico;
    private Topico topicoAtual;
    
    public AbaAjuda()
    {
        super("Ajuda", IconFactory.createIcon(IconFactory.CAMINHO_ICONES_PEQUENOS, "help.png"), true);

        initComponents();
        configurarArvore();
        configurarAcoes();
        
        rotuloErroCarregamento.setVisible(false);
        
        addComponentListener(new ComponentAdapter()
        {
            @Override
            public void componentShown(ComponentEvent e)
            {
                carregarAjuda();
            }
        });
    }

    private void configurarAcoes()
    {
        configurarAcaoAtualizarAjuda();
        configurarAcaoRecarregarTopico();
    }
    
    private void configurarAcaoAtualizarAjuda()
    {
        String nome = "Atualizar tópicos da ajuda";
        KeyStroke atalho = KeyStroke.getKeyStroke("F5");
        
        acaoAtualizarAjuda = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                ajudaCarregada = false;
                topicoAtual = null;
                
                carregarAjuda();
            }
        };
        
        getActionMap().put(nome, acaoAtualizarAjuda);
        getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(atalho, nome);
    }
    
    private void configurarAcaoRecarregarTopico()
    {
        String nome = "Recarregar o tópico da ajuda atual";
        KeyStroke atalho = KeyStroke.getKeyStroke("shift F5");
        
        acaoAtualizarTopico = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {                
                if (topicoAtual != null)
                {
                    exibirTopico(topicoAtual);
                }
            }
        };
        
        getActionMap().put(nome, acaoAtualizarTopico);
        getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(atalho, nome);
    }    
    
    private void configurarArvore()
    {
        arvore.setCellRenderer(new Renderizador());
        arvore.setRootVisible(false);
        arvore.setShowsRootHandles(true);
        arvore.addTreeSelectionListener(this);
    }
    
    private void carregarAjuda()
    {
        if (!ajudaCarregada && !carregandoAjuda)
        {            
            CardLayout layout = (CardLayout) getLayout();
            layout.show(this, "painelCarregamento");

            carregador = new Carregador();
            carregador.addPropertyChangeListener(this);
            carregador.execute();
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
        if (!(evt.getNewValue() instanceof SwingWorker.StateValue))
        {
            if (evt.getPropertyName().equals("progress"))
            {
                barraProgresso.setValue((Integer) evt.getNewValue());
            }
        }
        else if (((SwingWorker.StateValue) evt.getNewValue()) == SwingWorker.StateValue.DONE)
        {
            try
            {
                Ajuda ajuda = carregador.get();
                arvore.setModel(criarModeloAjuda(ajuda));                
                
                CardLayout layout = (CardLayout) getLayout();
                layout.show(AbaAjuda.this, "painelAjuda");
                
                conteudo.setText(templateRaiz);
            }
            catch (Exception excecao)
            {
                if (excecao.getCause() instanceof ErroCarregamentoAjuda)
                {
                    ErroCarregamentoAjuda erroCarregamentoAjuda = (ErroCarregamentoAjuda) excecao.getCause();
                    rotuloErroCarregamento.setText(String.format(rotuloErroCarregamento.getText(), erroCarregamentoAjuda.getMessage()));
                    rotuloErroCarregamento.setVisible(true);
                }
                else
                {
                    PortugolStudio.getInstancia().getTratadorExcecoes().exibirExcecao(excecao);
                }
            }
        }
    }

    @Override
    public void valueChanged(TreeSelectionEvent e)
    {
        DefaultMutableTreeNode noSelecionado = (DefaultMutableTreeNode) arvore.getLastSelectedPathComponent();
        
        if (noSelecionado != null)
        {
            Object valor = noSelecionado.getUserObject();
            
            if (valor instanceof Topico)
            {
                exibirTopico((Topico) valor);
            }
        }
    }
    
    private void exibirTopico(Topico topico)
    {
        conteudo.setText(topico.getConteudo());
        conteudo.setCaretPosition(0);
        
        topicoAtual = topico;
    }
    
    private class Carregador extends SwingWorker<Ajuda, Integer> implements ObservadorCarregamentoAjuda
    {
        private int numeroTopicos;
        
        @Override
        protected Ajuda doInBackground() throws Exception
        {
            CarregadorAjuda carregadorAjuda = new CarregadorAjuda();
            carregadorAjuda.adicionarObservadorCarregamento(this);
            carregadorAjuda.adicionarPreProcessadorConteudo(new PreProcessadorConteudoAjuda());

            return carregadorAjuda.carregar(Configuracoes.getInstancia().getDiretorioAjuda());
        }        
        
        @Override
        public void carregamentoAjudaIniciado(int numeroTopicos)
        {
            this.numeroTopicos = numeroTopicos;
            
            ajudaCarregada = false;
            carregandoAjuda = true;
            
            setProgress(0);
        }

        @Override
        public void carregamentoTopicoIniciado(int indiceTopico)
        {
            
        }

        @Override
        public void carregamentoTopicoFinalizado(int indiceTopico)
        {
            setProgress(caluclarPorcentagem(indiceTopico, numeroTopicos));
        }

        @Override
        public void carregamentoAjudaFinalizado()
        {
            setProgress(100);
            
            carregandoAjuda = false;
            ajudaCarregada = true;
        }
        
        private int caluclarPorcentagem(int indice, int total)
        {
            return (100 * indice) / total;
        }
    }
    
    private class PreProcessadorConteudoAjuda implements PreProcessadorConteudo
    {
        private Pattern padraoInicioTagPre = Pattern.compile("<pre[^>]*>([^<]*)</pre>", Pattern.CASE_INSENSITIVE);
        private Pattern padraoAtributoSrcHref = Pattern.compile("(src|href)[^=]*=[^(\"|')]*(\"|')([^(\"|')]*)(\"|')", Pattern.CASE_INSENSITIVE);        
        private Pattern padraoAtributoClass = Pattern.compile("(class)[^=]*=[^(\"|')]*(\"|')([^(\"|')]*)(\"|')", Pattern.CASE_INSENSITIVE);
                
        @Override
        public String processar(String conteudo, Topico topico)
        {
            conteudo = resolverReferenciasArquivos(conteudo, topico);
            conteudo = inserirComponentesEditor(conteudo);
            
            return conteudo;
        }
        
        private String inserirComponentesEditor(String conteudo)
        {
            try
            {
                StringBuilder novoConteudo = new StringBuilder(conteudo);
                Matcher avaliadorTagPre = padraoInicioTagPre.matcher(novoConteudo);

                while (avaliadorTagPre.find())
                {
                    String tag = avaliadorTagPre.group();
                    int inicioTag = avaliadorTagPre.start();

                    Matcher avaliadorAtributoClass = padraoAtributoClass.matcher(tag);

                    if (avaliadorAtributoClass.find())
                    {
                        String valor = avaliadorAtributoClass.group(3);

                        if (valor.toLowerCase().equals("codigo-portugol"))
                        {
                            String codigo = avaliadorTagPre.group(1).trim();
                                   codigo = codigo.replace("\r\n", "${rn}");
                                   codigo = codigo.replace("\n", "${n}");
                                   codigo = codigo.replace("\t", "${t}");
                                   codigo = codigo.replace("\"", "${dq}");
                                   codigo = codigo.replace("'", "${sq}");
                                   //codigo = codigo.replace("&", "&amp;");
                                   //codigo = codigo.replace("", templateRaiz)
                            
                            String tagObject = 
                                    "  <div>"
                                    + "     <object classid=\"br.univali.ps.ui.EditorAjuda\">"
                                    + "         <param name=\"editavel\" value=\"false\">"
                                    + "         <param name=\"codigo\" value=\"%s\">"                                    
                                    + "     </object>"
                                    + "</div>";
                            
                            tagObject = String.format(tagObject, codigo);
                            
                            novoConteudo.replace(inicioTag, inicioTag + tag.length(), tagObject);
                            
                            avaliadorTagPre.reset(novoConteudo);
                        }
                    }           
                }
                
                return novoConteudo.toString();
            }
            catch (Exception excecao)
            {
                return conteudo;
            }
        }
        
        private String resolverReferenciasArquivos(String conteudo, Topico topico)
        {
            try
            {
                StringBuilder novoConteudo = new StringBuilder(conteudo);
                Matcher avaliador = padraoAtributoSrcHref.matcher(novoConteudo);        

                while (avaliador.find())
                {
                    int posicao = avaliador.start();
                    String atributo = avaliador.group();
                    String valor = avaliador.group(3);

                    if (!valor.toLowerCase().startsWith("http://") && !valor.toLowerCase().startsWith("file:"))
                    {
                        File caminhoHtml = ((TopicoHtml) topico).getArquivoOrigem().getParentFile();
                        File novoCaminho = new File(caminhoHtml,  valor);
                        
                        String novoValor = atributo.replace(valor,  "file:".concat(novoCaminho.getCanonicalPath()));

                        novoConteudo.replace(posicao, posicao + atributo.length(), novoValor);                
                        avaliador.reset(novoConteudo.toString());
                    }        
                }

                return novoConteudo.toString();
            }
            catch (Exception ex)
            {
                return conteudo;
            }
        }
    }
    
    private DefaultTreeModel criarModeloAjuda(Ajuda ajuda)
    {
        DefaultMutableTreeNode raiz = new DefaultMutableTreeNode("Ajuda");
        
        for (Topico topico : ajuda.getTopicos())
        {
            raiz.add(criarNoTopico(topico));
        }
        
        return new DefaultTreeModel(raiz);
    }
    
    private DefaultMutableTreeNode criarNoTopico(Topico topico)
    {
        DefaultMutableTreeNode noTopico = new DefaultMutableTreeNode(topico);
        
        for (Topico subTopico : topico.getSubTopicos())
        {
            noTopico.add(criarNoTopico(subTopico));
        }
        
        return noTopico;
    }
    
    private static class Renderizador extends DefaultTreeCellRenderer
    {
        @Override
        public Component getTreeCellRendererComponent(JTree arvore, Object valor, boolean selecionado, boolean expandido, boolean folha, int linha, boolean focado)
        {            
            JLabel renderizador = (JLabel) super.getTreeCellRendererComponent(arvore, valor, selecionado, expandido, folha, linha, focado);
            DefaultMutableTreeNode no = (DefaultMutableTreeNode) valor;
            Object conteudoNo = no.getUserObject();
            
            if (conteudoNo instanceof Topico)
            {
                Topico topico = (Topico) conteudoNo;
                String titulo = topico.getTitulo();
                Icon icone = obterIcone(topico, selecionado, expandido, folha);

                renderizador.setText(titulo);
                renderizador.setIcon(icone);
            }
            
            return renderizador;            
        }
        
        private Icon obterIcone(Topico topico, boolean selecionado, boolean expandido, boolean folha)
        {
            File arquivoIcone = new File(topico.getIcone());
            
            if (!arquivoIcone.isAbsolute())
            {
                if (topico instanceof TopicoHtml)
                {
                    TopicoHtml topicoHtml = (TopicoHtml) topico;
                    arquivoIcone = new File(topicoHtml.getArquivoOrigem().getParent(), topico.getIcone());
                }
            }            
            
            String nomeCompleto = arquivoIcone.getName();
            String extensao = nomeCompleto.substring(nomeCompleto.lastIndexOf("."), nomeCompleto.length());
            String novoNome = nomeCompleto.replace(extensao, "");
                    
            if (expandido)
            {
                novoNome = novoNome.concat("_aberto");
            }
            else
            {
                if (!folha)
                {
                    novoNome = novoNome.concat("_fechado");
                }
            }
            
            if (selecionado)
            {
                novoNome = novoNome.concat("_selecionado");
            }                    
            
            novoNome = novoNome.concat(extensao);
            arquivoIcone = new File(arquivoIcone.toString().replace(nomeCompleto, novoNome));
            
            return IconFactory.createIcon(arquivoIcone);
        }
    }    
    